from mcp.server.fastmcp import Context, FastMCP
from mcp.types import SamplingMessage, TextContent
from pydantic import Field
from mcp.server.fastmcp.prompts import base

# Create MCP server
mcp = FastMCP("mcp-server", stateless_http=False)

# Our fake documents
docs = {
    "deposition.md": "Testimony of Angela Smith, P.E.",
    "report.pdf": "State of a 20m condenser tower.",
    "financials.docx": "Project budget and expenditures.",
    "outlook.pdf": "Future performance of the system.",
    "plan.md": "Steps for project implementation.",
    "spec.txt": "Technical requirements for the equipment.",
}

# TOOLS


@mcp.tool(name="doc_read_fixed", description="Read a fixed sample document.")
def doc_read_fixed() -> str:
    return docs["deposition.md"]


@mcp.tool(name="doc_read", description="Read any document by id.")
def doc_read(doc_id: str = Field(description="Document id")) -> str:
    if doc_id not in docs:
        raise ValueError("Document not found")
    return docs[doc_id]

# RESOURCES


@mcp.resource("docs://all", mime_type="application/json")
def docs_all() -> list[str]:
    return list(docs.keys())


@mcp.resource("docs://{doc_id}", mime_type="text/plain")
def docs_one(doc_id: str) -> str:
    return docs[doc_id]

# PROMPTS


@mcp.prompt(name="doc_list", description="Shows available documents.")
def doc_list() -> list[base.Message]:
    return [base.UserMessage("\n".join(docs.keys()))]


@mcp.prompt(name="doc_format", description="Ask to format a document to markdown.")
def doc_format(doc_id: str = Field(description="Document id")) -> list[base.Message]:
    msg = f"Reformat document <document_id>{doc_id}</document_id> into markdown."
    return [base.UserMessage(msg)]


# SAMPLING
@mcp.tool(name="doc_summarize", description="Generate a short summary of a document via client sampling.")
async def doc_summarize(ctx: Context, doc_id: str = Field(description="Document id")) -> str:
    """
    Asks the client to generate a short summary of the specified document.

    Args:
        ctx: MCP context to communicate with client
        doc_id: ID of the document to summarize

    Returns:
        Short summary generated by the client
    """
    if doc_id not in docs:
        return f"Error: Document '{doc_id}' not found."

    try:
        result = await ctx.session.create_message(
            messages=[
                SamplingMessage(
                    role="user",
                    content=TextContent(
                        type="text",
                        text=f"Please write a very short summary (2-3 sentences) of the following document:\n{docs[doc_id]}"
                    ),
                )
            ],
            max_tokens=150,
        )

        if result.content.type == "text":
            return result.content.text
        return str(result.content)

    except Exception as e:
        return f"Error generating summary via client sampling: {e}"


# Run app
mcp_app = mcp.streamable_http_app()
